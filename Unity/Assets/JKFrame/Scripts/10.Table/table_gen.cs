// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: 3.1.4
using System;
using System.Collections.Generic;

namespace main
{ 	
	public enum DialogType
	{ 
		DIALOG = 0, // 对话 
		ASIDE = 1, // 旁白 
		SELECT = 2, // 选项 
	}
		
	public partial class Language : tabtoy.ITableSerializable
	{ 
		public string ID = string.Empty;
		public string SimplifiedChinese = string.Empty;
		public string English = string.Empty;
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x80000:
                	{
						reader.ReadString( ref ID );
                	}
					break;
					case 0x80001:
                	{
						reader.ReadString( ref SimplifiedChinese );
                	}
					break;
					case 0x80002:
                	{
						reader.ReadString( ref English );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class Dialog : tabtoy.ITableSerializable
	{ 
		public string ID = string.Empty;
		public List<string> Condition = new List<string>();
		public DialogType DialogType = DialogType.DIALOG;
		public List<string> Name = new List<string>();
		public List<string> Content = new List<string>();
		public List<string> DialogEvent = new List<string>();
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x80000:
                	{
						reader.ReadString( ref ID );
                	}
					break;
					case 0x6c0001:
                	{
						reader.ReadString( ref Condition );
                	}
					break;
					case 0xa0002:
                	{
						reader.ReadEnum( ref DialogType );
                	}
					break;
					case 0x6c0003:
                	{
						reader.ReadString( ref Name );
                	}
					break;
					case 0x6c0004:
                	{
						reader.ReadString( ref Content );
                	}
					break;
					case 0x6c0005:
                	{
						reader.ReadString( ref DialogEvent );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class Event : tabtoy.ITableSerializable
	{ 
		public string ID = string.Empty;
		public Int32 Value = 0;
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x80000:
                	{
						reader.ReadString( ref ID );
                	}
					break;
					case 0x20001:
                	{
						reader.ReadInt32( ref Value );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	

	// Combine struct
	public partial class Table
	{ 
		// table: Dialog
		public List<Dialog> Dialog = new List<Dialog>(); 
		// table: Event
		public List<Event> Event = new List<Event>(); 
		// table: Language
		public List<Language> Language = new List<Language>(); 

		// Indices
		public Dictionary<string,Dialog> DialogByID = new Dictionary<string,Dialog>();
		public Dictionary<string,Event> EventByID = new Dictionary<string,Event>();
		public Dictionary<string,Language> LanguageByID = new Dictionary<string,Language>();
		
		
		

		public void ResetData( )
		{   
			Dialog.Clear(); 
			Event.Clear(); 
			Language.Clear();  
			DialogByID.Clear();
			EventByID.Clear();
			LanguageByID.Clear();
				
		}
		
		public void Deserialize( tabtoy.TableReader reader )
		{	
			reader.ReadHeader();

			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
				if (mamaSaidTagNameShouldBeLong == 0x6f0000)
				{
                    var tabName = string.Empty;
                    reader.ReadString(ref tabName);
					switch (tabName)
					{ 
						case "Dialog":
						{
							reader.ReadStruct(ref Dialog);	
						}
						break;
						case "Event":
						{
							reader.ReadStruct(ref Event);	
						}
						break;
						case "Language":
						{
							reader.ReadStruct(ref Language);	
						}
						break;
						default:
						{
							reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
						}
						break;
					}
				}
			}
		}

		public void IndexData( string tabName = "")
		{ 	
			if (tabName == "" || tabName == "Dialog")
			{
				foreach( var kv in Dialog )
				{
					DialogByID[kv.ID] = kv;
				}
				
			}
				
			if (tabName == "" || tabName == "Event")
			{
				foreach( var kv in Event )
				{
					EventByID[kv.ID] = kv;
				}
				
			}
				
			if (tabName == "" || tabName == "Language")
			{
				foreach( var kv in Language )
				{
					LanguageByID[kv.ID] = kv;
				}
				
			}
			
		}
		
	}
}
